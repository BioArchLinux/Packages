# Maintainer: Artem Klevtsov <a.a.klevtso@gmail.com>
# Maintainer: Stephen Martin <hwkiller@gmail.com>
# Contributor: Conor Anderson <conor@conr.ca>
# Contributor: Aleksandr Beliaev <trap000d@gmail.com>


pkgname=rstudio-desktop
pkgver=2025.05.0+496
_pkgver=${pkgver//+/.}
_srcname=rstudio-${pkgver//+/-}
_pkgsrc=rstudio-${pkgver//+/-}
_pandocver="current"
_quarto="FALSE"
_soci_version="4.0.3"
_nodeversion="23"
_quarto_branch="release/rstudio-cranberry-hibiscus"
: ${_copilot_version:=1.300.0}

pkgrel=1
pkgdesc="A powerful and productive integrated development environment \
	 (IDE) for R programming language"
arch=('x86_64')
url="https://posit.co/products/open-source/rstudio/"
license=('AGPL-3.0-only')

depends=('r>=3.3.0'
        'libboost_chrono.so'          # boost-libs
        'libboost_filesystem.so'      # boost-libs
        'libboost_iostreams.so'       # boost-libs
        'libboost_program_options.so' # boost-libs
        'libboost_thread.so'          # boost-libs
        'libcups'
        'nspr'
        'nss'
        'postgresql-libs'
        'sqlite3'
        'clang'
        'hunspell-en_US'
        'mathjax2'
        'pandoc'
        'libyaml-cpp.so' # yaml-cpp
        'r-rmarkdown'
        'r-renv'
        'r-testthat'
        'r-xml2'
        'r-yaml'
        'r-purrr'
        'r-digest'
        )

makedepends=(
  'apache-ant'
  'boost'
  'cmake'
  'git'
  'jdk11-openjdk'
  'libcups'
  'ninja'
  'nvm'
  'openssl'
  'pam'
  'python'
  'python-setuptools'
  'wget'
  'yarn'
)
optdepends=(
  'git: for git support'
  'nodejs: for copilot support'
  'openssh-askpass: for a git ssh access'
  'subversion: for subversion support'
)

source=("${_srcname}"::"git+https://github.com/rstudio/rstudio.git#tag=v${pkgver}"
        "quarto"::"git+https://github.com/quarto-dev/quarto.git#branch=${_quarto_branch}"
        "https://github.com/SOCI/soci/archive/refs/tags/v${_soci_version}.tar.gz"
        "https://github.com/github/copilot-language-server-release/releases/download/${_copilot_version}/copilot-language-server-linux-x64-${_copilot_version}.zip")

sha256sums=('44d9a1864f4e84bc9c86cc0a012bbe7885a897bd14c3cd60251bea2941ac9bb6'
            'SKIP'
            '4b1ff9c8545c5d802fbe06ee6cd2886630e5c03bf740e269bb625b45cf934928'
            '21f030b4a9b189818ebe73c9065dc140ad64308169b7cb323c9002018ffba074')
options=('!emptydirs' '!debug')

_nvm_env() {
  export HOME="$SRCDEST/node-home"
  export NVM_DIR="$SRCDEST/node-nvm"

  # set up nvm
  source /usr/share/nvm/init-nvm.sh || [[ $? != 1 ]]
  nvm install ${_nodeversion}
  nvm use ${_nodeversion}

  _npm_path="$(which npm | sed -E 's&/[^/]+$&&')"
  export RSTUDIO_NODE_VERSION=$(echo "$_npm_path" | sed -E 's&^\S+/v([0-9\.]+)/\S+$&\1&')
}

prepare() {
    _nvm_env

    cd ${srcdir}/${_srcname}
    # Do not use outdated version name of pandoc
    sed -E -e '/PANDOC_VERSION/s/"[0-9\.]+"/"'${_pandocver}'"/' -i "cmake/globals.cmake"

    # Suppress _FORTIFY_SOURCE mismatch warnings
    sed -i 's/D_FORTIFY_SOURCE=2/D_FORTIFY_SOURCE=3/' "src/cpp/CMakeLists.txt"

    # fix npm/node paths
    sed -E -e 's&set\(RSTUDIO_NODE_PATH .*\)&set(RSTUDIO_NODE_PATH "/usr/bin")&' \
    -i cmake/globals.cmake
    install -dm755 "$srcdir/${_srcname}/dependencies/common/node"
    ln -sfT "$NVM_DIR/versions/node/v$RSTUDIO_NODE_VERSION" "$srcdir/${_srcname}/dependencies/common/node/${RSTUDIO_NODE_VERSION}-patched"

    sed -E -e 's&^external-node-path=.*$&external-node-path=/usr/bin/node&' \
    -i src/cpp/conf/rsession-dev.conf

    sed -E -e 's&"\S+/common/node/\S+"&"/usr"&' \
    -i src/cpp/session/SessionOptions.cpp

    sed -E -e '/"node\.version"/s&value="[0-9\.]+"&value="Current"&' \
    -e '/"node\.dir"/s&value="\S+"&value="/usr"&' \
    -e 's&"\S+/common/node/\S+/bin/yarn"&"/usr/bin/yarn"&' \
    -i src/gwt/build.xml

    sed -E -e 's&PATHS "/opt/rstudio-tools/dependencies/common/node/\$\{RSTUDIO_NODE_VERSION\}"&PATHS "'"${_npm_path}"'"&' \
    -e 's&"\S+CMAKE_CURRENT_LIST_DIR\S+/dependencies/common/node/\S+"&"'"${_npm_path}"'"&g' \
    -e 's&set\(RSTUDIO_NODE_VERSION "[0-9\.]+"\)&set(RSTUDIO_NODE_VERSION "Current")&' \
    -i src/node/CMakeNodeTools.txt

    # needed for system yaml-cpp
    sed '/add_subdirectory(src)/i find_package(yaml-cpp REQUIRED)' -i CMakeLists.txt

    # fix os-release path
    sed -E 's&(STRINGS) "/etc/os-release" (OS_RELEASE)&\1 "/usr/lib/os-release" \2&' \
    -i cmake/modules/OsRelease.cmake

    # bundled deps
    cd "$srcdir/${_srcname}/dependencies"
      install -d pandoc/${_pandocver}
      ln -sfT /usr/bin/pandoc pandoc/${_pandocver}/pandoc
      ln -sfT /usr/share/myspell/dicts dictionaries
      ln -sfT /usr/share/mathjax2 mathjax-27
      install -Dm755 "$srcdir/copilot-language-server" -t "copilot-language-server"
      ln -sfT "$srcdir/soci-$_soci_version" "soci-$_soci_version"
    # Panmirror is picked up now from Quarto repo
      ln -sfT "$srcdir/quarto" "$srcdir/${_srcname}/src/gwt/lib/quarto"
}

_build_soci() {
  echo "Building SOCI libs..."

  local _opts_soci=(
      -B "soci-$_soci_version/build"
      -S "soci-$_soci_version"
      -G Ninja
      -DCMAKE_BUILD_TYPE=None
      -DCMAKE_INSTALL_PREFIX='/usr'
      -DSOCI_TESTS=OFF
      -DSOCI_CXX11=ON
      -DSOCI_EMPTY=OFF
      -DWITH_BOOST=ON
      -DWITH_POSTGRESQL=ON
      -DWITH_SQLITE3=ON
      -DWITH_DB2=OFF
      -DWITH_MYSQL=OFF
      -DWITH_ORACLE=OFF
      -DWITH_FIREBIRD=OFF
      -DWITH_ODBC=OFF
      -DBUILD_SHARED_LIBS=OFF
      -Wno-dev
  )

  cmake "${_opts_soci[@]}"
  cmake --build "soci-$_soci_version/build"
}

build() {

   export CMAKE_POLICY_VERSION_MINIMUM=3.5
    _nvm_env
    _build_soci

   cd "${srcdir}/${_srcname}/dependencies"
        install -d pandoc/${_pandocver}/bin/tools
        ln -sfT /usr/bin/pandoc pandoc/${_pandocver}/bin/tools/pandoc

    # Use path of system provided R packages
    export R_LIBS_USER=/usr/lib/R/library/
    export RSTUDIO_TOOLS_ROOT="${srcdir}/${_srcname}/dependencies"
    export RSTUDIO_NODE_PATH=/usr/
    export PATH="/usr/lib/jvm/java-11-openjdk/jre/bin/:${PATH}"

    cd "${srcdir}"/${_srcname}
    # These variables are used to create contents of Help > About dialog
    export osarch=$(uname -m)
    export distro=$(grep -E '^NAME=' /etc/os-release | cut -d= -f2- | tr -d '"')
    export RSTUDIO_VERSION_MAJOR=$(echo "$_pkgver" | cut -d "." -f1)
    export RSTUDIO_VERSION_MINOR=$(echo "$_pkgver" | cut -d "." -f2)
    export RSTUDIO_VERSION_PATCH=$(echo "$_pkgver" | cut -d "." -f3)
    export RSTUDIO_VERSION_SUFFIX="+$(echo "$_pkgver" | cut -d "." -f4)"
    export GIT_COMMIT=$(git rev-parse v${pkgver} | sed 's/^\(.\{7\}\).*/\1/')
    # export GIT_COMMIT=$(git ls-remote https://github.com/rstudio/rstudio.git | grep v${pkgver} | sed 's/^\(.\{7\}\).*/\1/')
    export PACKAGE_OS="$distro $osarch"
    # set rstudio node path
    export RSTUDIO_NODE_PATH=/usr/

    # node-gyp or node have a bug that prevents building with "text file busy"
    # if the kernel is too fast, so we have to disable IO_URING support. This
    # is cleary a hack and needs to be removed as soon as possible
    # nodejs/node#48444 is the necro bumped thread
    # originally from docker
    # https://github.com/nodejs/node/issues/48444
    export UV_USE_IO_URING=0

    # -DCMAKE_INSTALL_PREFIX seems ignored for sub-dependencies,
    # which results as empty '/usr/local/bin' in package
    # Following override works for cmake >3.29
    export CMAKE_INSTALL_PREFIX=/usr/lib/rstudio

    cd ${srcdir}/

      local _opts_rstudio=(
      -B build
      -S "${_srcname}"
      -G Ninja
      -DCMAKE_BUILD_TYPE=None
      -DRSTUDIO_TARGET=Electron
      -DRSTUDIO_USE_SYSTEM_BOOST=ON
      -DRSTUDIO_USE_SYSTEM_SOCI=OFF
      -DRSTUDIO_USE_SYSTEM_YAML_CPP=ON
      -DRSTUDIO_NODE_VERSION="Current"
      -DQUARTO_ENABLED=${_quarto}
      -DRSTUDIO_UNIT_TESTS_ENABLED=OFF
      -DBUILD_TESTING=OFF
      -Wno-dev
    )

    cmake "${_opts_rstudio[@]}"
    cmake --build build
}

package() {
  DESTDIR="$pkgdir" cmake --install build

  install -Dm755 /dev/stdin "${pkgdir}/usr/bin/rstudio" << END
#!/usr/bin/env bash

# See following script for potentially useful flags.
# https://github.com/ozankiratli/dotfiles/blob/master/.config/sway/scripts/rstudio-wayland

: \${XDG_CONFIG_HOME:=\$HOME/.config}

flags_file="\$XDG_CONFIG_HOME/rstudio-flags.conf"

lines=()
if [[ -f "\${flags_file}" ]]; then
  mapfile -t lines < "\${flags_file}"
fi

flags=()
for line in "\${lines[@]}"; do
  if [[ ! "\${line}" =~ ^[[:space:]]*#.* ]] && [[ -n "\${line}" ]]; then
    flags+=("\${line}")
  fi
done

: \${ELECTRON_IS_DEV:=0}
export ELECTRON_IS_DEV
: \${ELECTRON_FORCE_IS_PACKAGED:=true}
export ELECTRON_FORCE_IS_PACKAGED

exec /usr/lib/rstudio/rstudio "\${flags[@]}" "\$@"
END
}
